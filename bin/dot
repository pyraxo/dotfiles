#!/bin/sh
#
# dot
#
# `dot` handles installation, updates, things like that. Run it periodically
# to make sure you're on the latest and greatest.
# Taken from https://github.com/holman/dotfiles/blob/master/bin/dot.

set -e

parentDirectory="$(cd "$( dirname "$0" )" && pwd -P)"
dotfilesDirectory="$(cd "$( dirname "$parentDirectory" )" && pwd -P)"

displayUsageAndExit() {
	echo "dot -- dotfiles management"
	echo ""
	echo "Usage: dot [options]"
	echo ""
	echo "Options:"
	echo "  -e, --edit    Open dotfiles directory for editing"
	echo "  -h, --help    Show this help message and exit"
	echo "  -l, --list    List all available commands in bin directory"
	echo "  -f, --force   Force update by discarding local changes"
	exit
}

listCommands() {
	echo "Available commands in bin directory:"
	echo ""
	
	# Find all executable files in the bin directory (including hidden files)
	for file in "$parentDirectory"/* "$parentDirectory"/.*; do
		# Skip if not a file or not executable, or if file doesn't exist
		[ -f "$file" ] && [ -x "$file" ] || continue
		
		filename=$(basename "$file")
		
		# Skip special directories and the dot command itself
		[ "$filename" = "." ] || [ "$filename" = ".." ] || [ "$filename" = "dot" ] && continue
		
		# Extract description dynamically from the file
		description=""
		if [ -f "$file" ]; then
			# Method 1: Look for "Description:" in usage function
			description=$(awk '/usage\(\)/,/^}/ {
				if (/Description:/) {
					getline; 
					gsub(/^[[:space:]]*echo[[:space:]]*"/, "");
					gsub(/^[[:space:]]*/, "");
					gsub(/".*$/, "");
					if (length($0) > 0) print $0;
					exit
				}
			}' "$file" 2>/dev/null)
			
			# Method 2: Look for descriptive text after usage line but before Commands/Options
			if [ -z "$description" ]; then
				description=$(awk '/usage\(\)/,/^}/ {
					if (/echo.*Usage:/) { found_usage=1; next }
					if (found_usage && /echo.*""/) next
					if (found_usage && (/Commands:|Options:/ || /^[[:space:]]*echo[[:space:]]*"[[:space:]]*$"/)) exit
					if (found_usage && /echo.*[A-Za-z]/) {
						gsub(/^[[:space:]]*echo[[:space:]]*"/, "");
						gsub(/".*$/, "");
						gsub(/^[[:space:]]*/, "");
						if (length($0) > 3) {print $0; exit}
					}
				}' "$file" 2>/dev/null)
			fi
		else
			description="Command-line utility"
		fi
		
		# Format and display
		printf "  %-12s %s\n" "$filename" "$description"
	done
	echo ""
	echo "Run any command with -h or --help for detailed usage information."
	exit
}

# Flag to track if force update is requested
force_update=false

while test $# -gt 0; do
	case "$1" in
		"-h"|"--help")
			displayUsageAndExit
			;;
		"-e"|"--edit")
			exec "$EDITOR" "$dotfilesDirectory"
			exit
			;;
		"-l"|"--list")
			listCommands
			;;
		"-f"|"--force")
			force_update=true
			;;
		*)
			echo "Invalid option: $1"
			displayUsageAndExit
			;;
	esac
	shift
done

export ZSH=$dotfilesDirectory

# Update dotfiles themselves
echo "› git pull"
if [ "$force_update" = true ]; then
	# Force pull by discarding local changes
	git -C "$ZSH" reset --hard HEAD
	git -C "$ZSH" pull
else
	# Try normal pull first
	if ! git -C "$ZSH" pull; then
		echo "Pull failed. Use -f or --force to discard local changes and force update"
		exit 1
	fi
fi

# Set macOS defaults if on macOS
if [ "$OSTYPE" = "darwin"* ]; then
    $ZSH/macos/set-defaults.sh
fi

# Install homebrew
$ZSH/homebrew/install.sh 2>&1

# Upgrade homebrew
echo "› brew update"
brew update

echo "› brew upgrade"
brew upgrade

# Install software
echo "› script/install"
$ZSH/script/install

source $ZSH/.zshrc